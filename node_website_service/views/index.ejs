<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css" rel="stylesheet">
    <script src="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.js"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <script src="/socket.io/socket.io.js"></script>
  </head>
  <body>
    <h1><%= title %></h1>

    <ul class="mdc-list mdc-list--two-line" id="data_container">
      <li class="mdc-list-item" tabindex="0">
        <span class="mdc-list-item__ripple"></span>
        <span class="mdc-list-item__text">
      <span class="mdc-list-item__primary-text">Two-line item</span>
      <span class="mdc-list-item__secondary-text">Secondary text</span>
    </span>
      </li>

      <li class="mdc-list-item">
        <span class="mdc-list-item__ripple"></span>
        <span class="mdc-list-item__text">
      <span class="mdc-list-item__primary-text">Two-line item</span>
      <span class="mdc-list-item__secondary-text">Secondary text</span>
    </span>
      </li>
    </ul>
  </body>
<script type="text/javascript">
  //initialize websocket
  let d = new Date();
  let heartbeatWorker;
      const socket = io({
        query:{
          token: d.getTime()
        }
      });
      socket.connect();
  socket.on('connect',function() {
    console.log('Client has connected to the server! start interval');
    heartbeatWorker = setInterval(heartbeat, 5000);

  });
  // Add a connect listener
  socket.on('message',function(data) {
    let msg = JSON.parse(data);
    switch(msg.type){
      case 1000://response of heartbeat message
              console.log('received heartbeat response-->' + msg.content);
        break;
      case 1001:
        //refresh list
            break;
    }

  });
  // Add a disconnect listener
  socket.on('disconnect',function() {
    console.log('The client has disconnected! clean interval');
    clearInterval(heartbeatWorker);
  });

  function heartbeat(){
      let msg = {};
      msg.type = 1000;
      msg.content = 'heartbeat message';
      socket.send(JSON.stringify(msg));
  }

  //request all data from server
  window.onload = function(){
    function reqListener () {
      // console.log(this.responseText);
      console.log(this.status);
      if(this.status == 200){
          let json = JSON.parse(this.responseText);
          let container = document.getElementById('data_container');
          let htmlText = '';
          for(let j of json){
             let item = composeElementInCard(j);
             htmlText += item;
          }
          container.innerHTML = htmlText;
      }

    }

    console.log('requesting ' + window.location.href + 'retrieve_data' );
    var oReq = new XMLHttpRequest();
    oReq.addEventListener("load", reqListener);
    oReq.open("GET", window.location.href + 'retrieve_data');
    oReq.send();
  }//end of onload

  function composeElementInCard(j){
        let htmlText = '';
        let data = j.data;
        let title = getTitleByType(j.type) + '<br>Analysis Time:' + j.time;
        htmlText += '<h3 class="mdc-list-group__subheader">' + title + '</h3>\n';
        htmlText += '<li role="separator" class="mdc-list-divider"></li>';
        for(let weibo of data){
          let weibo_url = 'http://weibo.com/' + weibo.user_id + '/' + weibo.id;
          let additional_info = 'time:' + weibo.publish_time + '  likes:' + weibo.up_num + ' reposts:' + weibo.retweet_num + ' comments:' + weibo.comment_num;
          let list_element = '<li class="mdc-list-item"><div class="mdc-card">\n' +
                  ' <span class="mdc-list-item__ripple"></span>\n' +
                  ' <span class="mdc-list-item__text">\n' +
                  '      <a href="' + weibo_url+ '"><span class="mdc-list-item__primary-text">' + weibo.content + '</span></a>\n' +
                  '      <span class="mdc-list-item__secondary-text">' + additional_info + '</span>\n' +
                  ' </span></div></li>\n';
          htmlText += list_element;
        }

        return htmlText;
  }

  function composeElementInList(j){
      let htmlText = '';
      let data = j.data;
      let title = getTitleByType(j.type) + '<br>Analysis Time:' + j.time;
      htmlText += '<h3 class="mdc-list-group__subheader">' + title + '</h3>\n';
      htmlText += '<li role="separator" class="mdc-list-divider"></li>';
      for(let weibo of data){
        let weibo_url = 'http://weibo.com/' + weibo.user_id + '/' + weibo.id;
        let additional_info = 'time:' + weibo.publish_time + '  likes:' + weibo.up_num + ' reposts:' + weibo.retweet_num + ' comments:' + weibo.comment_num;
        let list_element = '<li class="mdc-list-item">\n' +
                ' <span class="mdc-list-item__ripple"></span>\n' +
                ' <span class="mdc-list-item__text">\n' +
                '      <a href="' + weibo_url+ '"><span class="mdc-list-item__primary-text">' + weibo.content + '</span></a>\n' +
                '      <span class="mdc-list-item__secondary-text">' + additional_info + '</span>\n' +
                ' </span></li>\n';
        htmlText += list_element;
      }

      return htmlText;
  }

  function getTitleByType(t){
    let title;
    switch(t){
      case 1001:
        title =  'Top 20 of most likes for news';
        break;
        case 1002:
          title =  'Top 20 of most  comments for news';
        break;
        case 1003:
          title =  'Top 20 of most  re-posts for news';
        break;
      case 1004:
        title =  'Top 20 of most  likes for entertainment messages';
      break;
      case 1005:
        title =  'Top 20 of most  comments for entertainment messages';
      break;
      case 1006:
        title =  'Top 20 of most  re-posts for entertainment messages';
        break;
    }

    return title;
  }
</script>
</html>
